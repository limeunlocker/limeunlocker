name: Build Kivy Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 90

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip python3-pip \
          build-essential libffi-dev libssl-dev \
          zlib1g-dev libbz2-dev libreadline-dev \
          libsqlite3-dev wget curl llvm \
          libncurses5-dev libncursesw5-dev \
          xz-utils tk-dev liblzma-dev \
          python3-openssl autoconf libtool \
          pkg-config cmake ninja-build \
          ccache ant gradle

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install buildozer==1.5.0 cython==0.29.33
        pip install colorama appdirs sh jinja2 six

    - name: Setup Android SDK
      run: |
        SDK_ROOT_PATH=$HOME/android-sdk
        mkdir -p $SDK_ROOT_PATH
        cd $SDK_ROOT_PATH
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ || true

        export PATH=$PATH:$SDK_ROOT_PATH/cmdline-tools/latest/bin
        yes | sdkmanager --licenses
        sdkmanager \
          "platform-tools" \
          "platforms;android-31" \
          "build-tools;30.0.3"

        echo "ANDROID_SDK_ROOT=$SDK_ROOT_PATH" >> $GITHUB_ENV
        echo "ANDROID_HOME=$SDK_ROOT_PATH" >> $GITHUB_ENV
        echo "$SDK_ROOT_PATH/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$SDK_ROOT_PATH/platform-tools" >> $GITHUB_PATH
        echo "$SDK_ROOT_PATH/build-tools/30.0.3" >> $GITHUB_PATH

    - name: Setup buildozer
      run: |
        mkdir -p ~/.buildozer/android
        ln -sf $ANDROID_HOME ~/.buildozer/android/platform
        buildozer init || echo "buildozer.spec already exists"

    - name: Test AIDL availability
      run: |
        echo "Checking for aidl..."
        if ! command -v aidl &> /dev/null; then
          echo "❌ AIDL not found in PATH!"
          echo "Available in:"
          find $ANDROID_HOME -name aidl
          exit 1
        else
          echo "✅ AIDL is available: $(which aidl)"
        fi

    - name: Build APK
      run: |
        echo "Starting APK build..."
        export PATH="$ANDROID_HOME/build-tools/30.0.3:$PATH"
        export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
        export PATH="$ANDROID_HOME/platform-tools:$PATH"

        export PYTHONUNBUFFERED=1
        export P4A_RELEASE_KEYSTORE=$HOME/debug.keystore
        export P4A_RELEASE_KEYALIAS=androiddebugkey
        export P4A_RELEASE_KEYSTORE_PASSWD=android
        export P4A_RELEASE_KEYALIAS_PASSWD=android

        if [ ! -f "$P4A_RELEASE_KEYSTORE" ]; then
          keytool -genkey -v -keystore $P4A_RELEASE_KEYSTORE -alias androiddebugkey \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US" \
            -storepass android -keypass android
        fi

        buildozer android debug --verbose

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: lime-offline-unlocker-debug
        path: bin/*.apk
        retention-days: 30

    - name: Upload logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-failure
        path: |
          .buildozer/
        retention-days: 7
