name: Build Kivy Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 90

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Install system dependencies
      run: |
        echo "Updating apt-get and installing system dependencies..."
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip python3-pip \
          build-essential libffi-dev libssl-dev \
          zlib1g-dev libbz2-dev libreadline-dev \
          libsqlite3-dev wget curl llvm \
          libncurses5-dev libncursesw5-dev \
          xz-utils tk-dev liblzma-dev \
          python3-openssl autoconf libtool \
          pkg-config cmake ninja-build \
          ccache ant gradle

    - name: Install Python dependencies
      run: |
        echo "Installing Python dependencies..."
        python -m pip install --upgrade pip wheel setuptools
        pip install buildozer==1.5.0 cython==0.29.33
        pip install colorama appdirs sh jinja2 six

    - name: Setup Android SDK
      run: |
        # Define Android SDK root path
        SDK_ROOT_PATH=$HOME/android-sdk
        
        # Create directory and navigate into it
        echo "Creating Android SDK directory at $SDK_ROOT_PATH..."
        mkdir -p $SDK_ROOT_PATH
        cd $SDK_ROOT_PATH
        
        # Download command line tools
        echo "Downloading Android command-line tools..."
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        
        # Move extracted tools to the 'latest' subdirectory for proper sdkmanager functionality
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ || true
        
        # Add primary SDK tools to PATH for the current shell session and future steps
        echo "Adding Android SDK command-line tools to PATH for current session..."
        export PATH=$PATH:$SDK_ROOT_PATH/cmdline-tools/latest/bin
        export PATH=$PATH:$SDK_ROOT_PATH/platform-tools
        
        # Accept licenses
        echo "Accepting Android SDK licenses..."
        yes | sdkmanager --licenses
        
        # Install required SDK packages for Buildozer
        echo "Installing Android SDK packages (platform-tools, platforms;android-31, build-tools;31.0.0)..."
        sdkmanager \
          "platform-tools" \
          "platforms;android-31" \
          "build-tools;31.0.0"
        
        # VERIFICATION: List contents of the build-tools directory to confirm AIDL is present
        echo "Contents of build-tools/31.0.0 directory:"
        ls -F $SDK_ROOT_PATH/build-tools/31.0.0/
        
        # IMPORTANT: Persist environment variables for subsequent steps using GITHUB_ENV and GITHUB_PATH
        echo "Persisting Android SDK environment variables for subsequent steps..."
        echo "ANDROID_SDK_ROOT=$SDK_ROOT_PATH" >> $GITHUB_ENV
        echo "ANDROID_HOME=$SDK_ROOT_PATH" >> $GITHUB_ENV # Buildozer often uses ANDROID_HOME
        echo "$SDK_ROOT_PATH/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$SDK_ROOT_PATH/platform-tools" >> $GITHUB_PATH
        echo "$SDK_ROOT_PATH/build-tools/31.0.0" >> $GITHUB_PATH # Ensure build-tools path is available

    - name: Setup buildozer
      run: |
        echo "Setting up Buildozer environment..."
        mkdir -p ~/.buildozer/android
        ln -sf $ANDROID_HOME ~/.buildozer/android/platform
        buildozer init || echo "Buildozer already initialized or buildozer.spec exists."

    - name: Verify AIDL Path Availability
      run: |
        echo "Verifying AIDL executable is in PATH..."
        BUILD_TOOLS_31_PATH="$ANDROID_HOME/build-tools/31.0.0"
        
        if [ -d "$BUILD_TOOLS_31_PATH" ]; then
          echo "Build-tools 31.0.0 directory found: $BUILD_TOOLS_31_PATH"
        else
          echo "WARNING: Build-tools 31.0.0 directory not found at $BUILD_TOOLS_31_PATH."
          echo "Attempting to install build-tools 30.0.3 as a fallback if not already present."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
          # Ensure this fallback path is also added to GITHUB_PATH for the current session
          echo "$ANDROID_HOME/build-tools/30.0.3" >> $GITHUB_PATH
        fi
        
        # Test if 'aidl' command is discoverable in the current PATH
        if command -v aidl &> /dev/null
        then
            echo "SUCCESS: AIDL executable found in PATH."
        else
            echo "ERROR: AIDL executable NOT found in PATH. Buildozer may still fail."
            # Consider exiting with an error here if this is a critical failure point: exit 1
        fi

    - name: Build APK
      run: |
        echo "Starting APK build with Buildozer..."
        
        # Ensure build-tools path is explicitly in PATH for this step's shell
        # This is the most direct way to ensure AIDL is found for buildozer.
        export PATH="$ANDROID_HOME/build-tools/31.0.0:$PATH"
        # If using fallback, ensure that path is also included.
        # This is slightly redundant if previous GITHUB_PATH worked, but adds robustness.
        export PATH="$ANDROID_HOME/build-tools/30.0.3:$PATH"
        
        export PYTHONUNBUFFERED=1
        
        export P4A_RELEASE_KEYSTORE=$HOME/debug.keystore
        export P4A_RELEASE_KEYALIAS=androiddebugkey
        export P4A_RELEASE_KEYSTORE_PASSWD=android
        export P4A_RELEASE_KEYALIAS_PASSWD=android
        
        if [ ! -f "$P4A_RELEASE_KEYSTORE" ]; then
          echo "Generating debug keystore..."
          keytool -genkey -v -keystore $P4A_RELEASE_KEYSTORE -alias androiddebugkey \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US" \
            -storepass android -keypass android
          echo "Debug keystore generated at $P4A_RELEASE_KEYSTORE"
        else
          echo "Debug keystore already exists at $P4A_RELEASE_KEYSTORE"
        fi
        
        buildozer android debug --verbose

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: lime-offline-unlocker-debug
        path: bin/*.apk
        retention-days: 30

    - name: Upload logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-failure
        path: |
          .buildozer/
        retention-days: 7
